Index: ../src/Product.java
===================================================================
diff --git a/../src/Product.java b/../src/Product.java
deleted file mode 100644
--- a/../src/Product.java	
+++ /dev/null	
@@ -1,139 +0,0 @@
-import java.util.*;
-
-// Entities
-class Product {
-    private int id; // ID produk
-    private String name; // Nama produk
-    private double price; // Harga produk
-
-    // Constructor, getters, and setters
-    public Product() {
-    }
-
-    public Product(int id, String name, double price) {
-        this.id = id;
-        this.name = name;
-        this.price = price;
-    }
-
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public double getPrice() {
-        return price;
-    }
-
-    public void setPrice(double price) {
-        this.price = price;
-    }
-
-    // Metode untuk memberikan representasi string produk yang lebih informatif
-    @Override
-    public String toString() {
-        return "ID: " + id + ", Nama: " + name + ", Harga: Rp." + price;
-    }
-}
-
-// Repositories
-interface ProductRepository {
-    Product findById(int id); // Mencari produk berdasarkan ID
-    void save(Product product); // Menyimpan produk
-    List<Product> findAll(); // Mengambil semua produk
-}
-
-class InMemoryProductRepository implements ProductRepository {
-    private Map<Integer, Product> products = new HashMap<>();
-    private static int counter = 0;
-
-    @Override
-    public Product findById(int id) {
-        return products.get(id);
-    }
-
-    @Override
-    public void save(Product product) {
-        int id = generateUniqueId();
-        product.setId(id);
-        products.put(id, product);
-    }
-
-    @Override
-    public List<Product> findAll() {
-        return new ArrayList<>(products.values());
-    }
-
-    // Metode untuk menghasilkan ID unik untuk produk
-    private int generateUniqueId() {
-        return ++counter;
-    }
-}
-
-// Services
-class ProductService {
-    private final ProductRepository productRepo;
-
-    public ProductService(ProductRepository productRepo) {
-        this.productRepo = productRepo;
-    }
-
-    // Metode untuk menambahkan produk baru
-    public void addProduct(String name, double price) {
-        Product product = new Product();
-        product.setName(name);
-        product.setPrice(price);
-        productRepo.save(product);
-    }
-
-    // Metode untuk mendapatkan semua produk
-    public List<Product> getAllProducts() {
-        return productRepo.findAll();
-    }
-
-    // Metode untuk mencari produk berdasarkan ID
-    public Product findProductById(int id) {
-        return productRepo.findById(id);
-    }
-}
-
-// Main Program
-class Main {
-    public static void main(String[] args) {
-        // Inisialisasi repositori dan layanan
-        ProductRepository productRepo = new InMemoryProductRepository();
-        ProductService productService = new ProductService(productRepo);
-
-        // Menambahkan produk
-        productService.addProduct("Laptop", 8000);
-        productService.addProduct("Smartphone", 5000);
-        productService.addProduct("Headphones", 1000);
-
-        // Mengambil dan mencetak semua produk
-        List<Product> allProducts = productService.getAllProducts();
-        System.out.println("Semua Produk:");
-        for (Product product : allProducts) {
-            System.out.println(product);
-        }
-
-        // Mencari produk berdasarkan ID
-        int productIdToFind = 2;
-        Product foundProduct = productService.findProductById(productIdToFind);
-        if (foundProduct != null) {
-            System.out.println("\nProduk ditemukan: " + foundProduct);
-        } else {
-            System.out.println("\nProduk tidak ditemukan dengan ID: " + productIdToFind);
-        }
-    }
-}
Index: ../chapter04-Single-Responsibilty-Principle.iml
===================================================================
diff --git a/../chapter04-Single-Responsibilty-Principle.iml b/../chapter04-Single-Responsibilty-Principle.iml
deleted file mode 100644
--- a/../chapter04-Single-Responsibilty-Principle.iml	
+++ /dev/null	
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: ../analisa.md
===================================================================
diff --git a/../analisa.md b/../analisa.md
deleted file mode 100644
--- a/../analisa.md	
+++ /dev/null	
@@ -1,18 +0,0 @@
-**Single Responsibility Principle**
-SRP, atau Prinsip Tanggung Jawab Tunggal, adalah salah satu dari lima prinsip desain dalam SOLID yang bertujuan untuk membantu pengembang perangkat lunak dalam menciptakan kode yang mudah dimengerti, dikelola, dan dikembangkan.
-
-Prinsip Tanggung Jawab Tunggal (SRP) menyatakan bahwa sebuah kelas seharusnya hanya memiliki satu alasan untuk berubah. Artinya, sebuah kelas seharusnya hanya memiliki satu tanggung jawab atau fungsi utama. Dengan kata lain, kelas tersebut seharusnya fokus pada satu tugas atau aspek tertentu dari fungsionalitas yang diberikan, dan tidak seharusnya memiliki tanggung jawab atau ketergantungan yang berlebihan.
-
-1. **Analisis BookService:**
-* Entities (Model): Kelas Book dan Author mewakili entitas buku dan penulis dengan atribut yang sesuai. Mereka memiliki metode toString() untuk memberikan representasi string yang lebih informatif.
-* Repositories: Interface BookRepo dan AuthorRepo mendefinisikan kontrak untuk operasi-operasi dasar pada entitas buku dan penulis seperti mencari dan menyimpan data. Kelas BookRepository dan AuthorRepository adalah implementasi dari repositori yang menggunakan struktur data Map untuk menyimpan data.
-* Services: Kelas BookService dan AuthorService bertanggung jawab atas logika bisnis terkait buku dan penulis. Mereka menyediakan metode untuk menyimpan data, validasi, dan operasi lainnya.
-* Main Program (Controller): Kelas App bertindak sebagai controller yang menginisialisasi repositori, layanan, dan berinteraksi dengan pengguna melalui metode main(). Ini juga menampilkan output hasil operasi.
-
-2. **Analisis Product:**
-* Entities (Model): Kelas Product mewakili entitas produk dengan atribut ID, nama, dan harga. Metode toString() digunakan untuk memberikan representasi string yang lebih informatif.
-* Repositories: Interface ProductRepository mendefinisikan kontrak untuk operasi-operasi dasar pada entitas produk seperti mencari berdasarkan ID, menyimpan, dan mengambil semua produk. Kelas InMemoryProductRepository adalah implementasi dari repositori yang menggunakan struktur data Map untuk menyimpan produk dalam memori.
-* Services: Kelas ProductService bertanggung jawab atas logika bisnis terkait produk. Ini menyediakan metode untuk menambahkan produk baru, mengambil semua produk, dan mencari produk berdasarkan ID.
-* Main Program (Controller): Kelas Main bertindak sebagai controller yang menginisialisasi repositori dan layanan, menambahkan produk, dan berinteraksi dengan pengguna melalui konsol dengan menampilkan semua produk dan mencari produk berdasarkan ID.
-
-Kode ini memisahkan peran-peran utama dalam aplikasi, menjaga prinsip SRP (Single Responsibility Principle) dengan setiap kelas memiliki tanggung jawabnya sendiri, sehingga memudahkan pemeliharaan dan pengembangan aplikasi yang lebih besar.
\ No newline at end of file
Index: ../src/BookService.java
===================================================================
diff --git a/../src/BookService.java b/../src/BookService.java
deleted file mode 100644
--- a/../src/BookService.java	
+++ /dev/null	
@@ -1,304 +0,0 @@
-import java.time.LocalDate;
-import java.util.*;
-
-// Entities
-class Book {
-    private int id; // ID buku
-    private int authorId; // ID penulis buku
-    private String name; // Judul buku
-    private String publisherName; // Nama penerbit buku
-    private LocalDate released; // Tanggal terbit buku
-
-    // Getters dan setters untuk atribut buku
-
-    // Getter untuk mendapatkan ID buku
-    public int getId() {
-        return id;
-    }
-
-    // Setter untuk mengatur ID buku
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    // Getter untuk mendapatkan ID penulis buku
-    public int getAuthorId() {
-        return authorId;
-    }
-
-    // Setter untuk mengatur ID penulis buku
-    public void setAuthorId(int authorId) {
-        this.authorId = authorId;
-    }
-
-    // Getter untuk mendapatkan judul buku
-    public String getName() {
-        return name;
-    }
-
-    // Setter untuk mengatur judul buku
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    // Getter untuk mendapatkan nama penerbit buku
-    public String getPublisherName() {
-        return publisherName;
-    }
-
-    // Setter untuk mengatur nama penerbit buku
-    public void setPublisherName(String publisherName) {
-        this.publisherName = publisherName;
-    }
-
-    // Getter untuk mendapatkan tanggal terbit buku
-    public LocalDate getReleased() {
-        return released;
-    }
-
-    // Setter untuk mengatur tanggal terbit buku
-    public void setReleased(LocalDate released) {
-        this.released = released;
-    }
-
-    // Metode untuk merepresentasikan objek buku sebagai string
-    @Override
-    public String toString() {
-        return "Buku{" +
-                "id=" + id +
-                ", IdPenulis=" + authorId +
-                ", Judul='" + name + '\'' +
-                ", NamaPenerbit='" + publisherName + '\'' +
-                ", TanggalTerbit=" + released +
-                '}';
-    }
-}
-
-class Author {
-    private int authorId; // ID penulis
-    private String name; // Nama penulis
-
-    // Getters dan setters untuk atribut penulis
-
-    // Getter untuk mendapatkan ID penulis
-    public int getAuthorId() {
-        return authorId;
-    }
-
-    // Setter untuk mengatur ID penulis
-    public void setAuthorId(int authorId) {
-        this.authorId = authorId;
-    }
-
-    // Getter untuk mendapatkan nama penulis
-    public String getName() {
-        return name;
-    }
-
-    // Setter untuk mengatur nama penulis
-    public void setName(String name) {
-        this.name = name;
-    }
-}
-
-// Interfaces
-interface BookRepo {
-    // Metode untuk mencari buku berdasarkan ID penulis dan nama buku
-    Book findByAuthorIdAndBookName(int authorId, String bookName);
-
-    // Metode untuk menyimpan buku
-    void save(Book book);
-
-    // Metode untuk mencari daftar buku berdasarkan ID
-    List<Book> findByBookIds(List<Integer> bookIds);
-}
-
-interface AuthorRepo {
-    // Metode untuk memeriksa keberadaan ID penulis
-    boolean checkAuthorId(int authorId);
-
-    // Metode untuk menyimpan penulis baru
-    Author save(Author author);
-}
-
-// Repositories
-class BookRepository implements BookRepo {
-    private Map<Integer, Book> books = new HashMap<>();
-    private static int counter = 0; // Deklarasi variabel statis di level kelas
-
-    // Implementasi repositori buku
-
-    // Metode untuk mencari buku berdasarkan ID penulis dan nama buku
-    @Override
-    public Book findByAuthorIdAndBookName(int authorId, String bookName) {
-        for (Book book : books.values()) {
-            if (book.getAuthorId() == authorId && book.getName().equals(bookName)) {
-                return book;
-            }
-        }
-        return null;
-    }
-
-    // Metode untuk menyimpan buku
-    @Override
-    public void save(Book book) {
-        int id = generateUniqueId();
-        book.setId(id);
-        books.put(id, book);
-    }
-
-    // Metode untuk mencari daftar buku berdasarkan ID
-    @Override
-    public List<Book> findByBookIds(List<Integer> bookIds) {
-        List<Book> foundBooks = new ArrayList<>();
-        for (Integer bookId : bookIds) {
-            Book book = books.get(bookId);
-            if (book != null) {
-                foundBooks.add(book);
-            }
-        }
-        return foundBooks;
-    }
-
-    // Metode untuk menghasilkan ID unik
-    private int generateUniqueId() {
-        return ++counter; // Menggunakan variabel statis counter
-    }
-}
-
-class AuthorRepository implements AuthorRepo {
-    private Map<Integer, Author> authors = new HashMap<>();
-
-    // Implementasi repositori penulis
-
-    // Metode untuk memeriksa keberadaan ID penulis
-    @Override
-    public boolean checkAuthorId(int authorId) {
-        return authors.containsKey(authorId);
-    }
-
-    // Metode untuk menyimpan penulis baru
-    @Override
-    public Author save(Author author) {
-        authors.put(author.getAuthorId(), author);
-        return author;
-    }
-}
-
-// Services
-class AuthorService {
-    private final AuthorRepo authorRepo;
-
-    // Konstruktor AuthorService
-    public AuthorService(AuthorRepo authorRepo) {
-        this.authorRepo = authorRepo;
-    }
-
-    // Metode untuk menyimpan penulis jika belum ada
-    public void saveIfNotExist(int authorId) {
-        boolean existedAuthor = authorRepo.checkAuthorId(authorId);
-        if (!existedAuthor) {
-            // Buat penulis baru dengan nama "Tidak diketahui" jika belum ada
-            Author author = new Author();
-            author.setName("Tidak diketahui");
-            author.setAuthorId(authorId);
-            authorRepo.save(author);
-        }
-    }
-}
-
-class BookService {
-    private final BookRepo bookRepo;
-    private final AuthorService authorService;
-
-    // Konstruktor BookService
-    public BookService(BookRepo bookRepo, AuthorService authorService) {
-        this.bookRepo = bookRepo;
-        this.authorService = authorService;
-    }
-
-    // Metode untuk menyimpan buku
-    public void saveBook(int authorId, String bookName, String publisher) throws Exception {
-        validateBook(authorId, bookName);
-        authorService.saveIfNotExist(authorId);
-        String publisherName = getPublisherName(publisher);
-
-        // Buat objek buku dan simpan ke repositori buku
-        Book book = new Book();
-        book.setAuthorId(authorId);
-        book.setName(bookName);
-        book.setPublisherName(publisherName);
-        bookRepo.save(book);
-    }
-
-    // Metode untuk mendapatkan nama penerbit, jika tidak ada, set sebagai "Anonim"
-    private String getPublisherName(String publisher) {
-        return publisher != null ? publisher : "Anonim";
-    }
-
-    // Metode untuk validasi buku sebelum menyimpan
-    private void validateBook(int authorId, String bookName) throws Exception {
-        if (bookName == null)
-            throw new Exception("Judul Buku Kosong");
-        // Cek apakah buku dengan penulis dan judul yang sama sudah ada
-        Book bookByAuthorIdAndBookName = bookRepo.findByAuthorIdAndBookName(authorId, bookName);
-        if (bookByAuthorIdAndBookName != null) {
-            throw new Exception("Buku Duplikat");
-        }
-    }
-
-    // Metode untuk merilis buku-buku dengan ID yang diberikan berdasarkan penulis
-    public Map<Integer, List<Book>> releaseBooksByAuthor(List<Integer> bookIds) {
-        // Update tanggal terbit buku-buku dengan ID yang diberikan
-        List<Book> books = updateReleaseBooks(bookIds);
-        // Kelompokkan buku-buku berdasarkan penulis
-        return groupBooksByAuthor(books);
-    }
-
-    // Metode untuk mengelompokkan buku-buku berdasarkan penulis
-    private Map<Integer, List<Book>> groupBooksByAuthor(List<Book> books) {
-        Map<Integer, List<Book>> booksByAuthor = new HashMap<>();
-        for (Book book : books) {
-            int authorId = book.getAuthorId();
-            List<Book> bookList = booksByAuthor.getOrDefault(authorId, new ArrayList<>());
-            bookList.add(book);
-            booksByAuthor.put(authorId, bookList);
-        }
-        return booksByAuthor;
-    }
-
-    // Metode untuk memperbarui tanggal terbit buku-buku dengan ID yang diberikan
-    private List<Book> updateReleaseBooks(List<Integer> bookIds) {
-        List<Book> books = bookRepo.findByBookIds(bookIds);
-        for (Book book : books) {
-            book.setReleased(LocalDate.now());
-        }
-        return books;
-    }
-}
-
-// Program Utama
-class App {
-    public static void main(String[] args) throws Exception {
-        // Inisialisasi repo dan service
-        BookRepo bookRepo = new BookRepository();
-        AuthorRepo authorRepo = new AuthorRepository();
-        AuthorService authorService = new AuthorService(authorRepo);
-        BookService bookService = new BookService(bookRepo, authorService);
-
-        // Menyimpan buku
-        bookService.saveBook(1, "Hujan", "Gramedia");
-        bookService.saveBook(2, "Laskar Pelangi", null);
-        bookService.saveBook(3, "Bumi Manusia", "Lentera Dipantara");
-
-        // Mengeluarkan buku berdasarkan penulis
-        Map<Integer, List<Book>> booksByAuthor = bookService.releaseBooksByAuthor(Arrays.asList(1, 2, 3));
-
-        // Mencetak output dengan setiap item pada baris baru
-        System.out.println("{");
-        for (Map.Entry<Integer, List<Book>> entry : booksByAuthor.entrySet()) {
-            System.out.println(entry.getKey() + "=" + entry.getValue() + ",");
-        }
-        System.out.println("}");
-    }
-}
\ No newline at end of file
Index: ../.gitignore
===================================================================
diff --git a/../.gitignore b/../.gitignore
deleted file mode 100644
--- a/../.gitignore	
+++ /dev/null	
@@ -1,29 +0,0 @@
-### IntelliJ IDEA ###
-out/
-!**/src/main/**/out/
-!**/src/test/**/out/
-
-### Eclipse ###
-.apt_generated
-.classpath
-.factorypath
-.project
-.settings
-.springBeans
-.sts4-cache
-bin/
-!**/src/main/**/bin/
-!**/src/test/**/bin/
-
-### NetBeans ###
-/nbproject/private/
-/nbbuild/
-/dist/
-/nbdist/
-/.nb-gradle/
-
-### VS Code ###
-.vscode/
-
-### Mac OS ###
-.DS_Store
\ No newline at end of file
Index: ../image/GambarScreenshoot.md
===================================================================
diff --git a/../image/GambarScreenshoot.md b/../image/GambarScreenshoot.md
deleted file mode 100644
--- a/../image/GambarScreenshoot.md	
+++ /dev/null	
@@ -1,11 +0,0 @@
-//SS Struktur Folder Akhir dari Project
-![StrukturFolderSingleResponsibilityPrinciple](https://github.com/ElviraGladysSamsul/belajardesainpattern_elvira/assets/146049473/2739685c-bbbb-4213-9997-2e6e4265cc50)
-
-//SS Output BookServices
-![BookService](https://github.com/ElviraGladysSamsul/belajardesainpattern_elvira/assets/146049473/4ba1e154-672c-4aee-a837-5810840db52c)
-
-//SS Tugas Product
-![TugasProduct](https://github.com/ElviraGladysSamsul/belajardesainpattern_elvira/assets/146049473/19241485-5c40-41f9-be03-7ef6482a77bd)
-
-
-
